# Modifying template to generate input files


function read_keyword_list(premade_csv_file)
    read_file = read(premade_csv_file)
    keyword_list = {}
    for line in read_file do
              split_line = line.strip().split(',')
        keyword_sublist = split_line[1:-1]
        keyword_list[split_line[0]] = keyword_sublist
    return keyword_list

    







function make_modify_keyword(keyword_list) 
   
    modified_keyword = {}

    for option in keyword_list.keys() do
        keyword_1 = input('Do you want to modify the' + option + 'category?(y/n)')

        if keyword_1.lower() == 'n' do
            continue

        else do
            modified_subkeyword = {}

            for sub_option in keywprd_list[option] do
                keyword_2 = input('Do you want to modify the' + sub_option + 'keyword in the' + option + 'category?(y/n)')
    
                if keyword_2.lower() == 'n' do
                    continue

                else do
                    keyword_3 = input('Please input the keyword value:')
                    modified_subkeyword[sub_option] = keyword_3

             modified_keyword[option] = modified_subkeyword
                          
    return modified_keyword










function make_new_input(template_input_file, modified_keyword)  

    new_input_file = input('Please input the name of the new input file:')

    with open('new_input_file', 'a', encoding = 'utf-8') as f, open ('template_input_file', 'r', encoding = 'utf-8') as t
        for line in t:
            write = False
            for category in modified_keywords.keys() do
                if category not in line do
                    continue
                else do
                    write = True
                    tline_split = line.strip().split(" ")
                    new_line = ' ' + tline_split[0]
                    for keyword in tline_split[1:-1] do
                        sub_keyword = keyword.strip().split('=')[0]
                        if sub_keyword in modified_keywords[category].keys() do
                            new_line += (
                                ' '
                                + keyword.strip().split('=')[0]
                                + '='
                                + modified_keywords[category][sub_keyword]
                            )
                        else do
                            new_line += ' ' + keyword
                    new_line += ' ' + '$END' + '\n'
            if not write do 
                f.write(line)
            else:
                f.write(new_line)
                    
                
        





premade_file = input("Please input the path of the .csv file for keywords:")
keyword_list = wf.read_keyword_list(premade_file)
modified_keywords = wf.make_modified_keyword(keyword_list)
template_input_file = input("Please input the path of the template input file:")
wf.make_new_input(template_input_file, modified_keywords)







# Submitting calculations
## Will be implemented by shell bash on servers





# Collect energy data from output .log files

function collect_energy(read_log_file)
    lines = read_log_file.readlines()
    energy = {}
    for line in lines do
        if 'SCF energy' in line do
            energy['SCF'] = float(energy_in_line_SCF)
        elif 'CCSD energy' in line do 
            energy['CCSD'] = float(energy_in_line_CCSD)
        elif 'CCSDt energy' in line do 
            energy['CCSDt'] = float(energy_in_line_CCSDt) 
    return energy

log_file_names = ['output_.log_file_1', 'output_.log_file_2', ...]  ## Can be done separately by snakemake
data = {}

for output_file in log_file_names do
    with open('output_.log_file', 'r', encoding = 'utf-8') as read_log_file
    log_file_energy = collect_energy(read_log_file)
    data[read_log_file_name] = log_file_energy   
    ## data is a recursive dictionary with structure {log_file_name:{log_file_energy:pertinent_energy}}, which will be used for plotting






### All python and shell bashes will be packed by snakemake
